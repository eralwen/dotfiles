* Basic Defaults
** Disable bars
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC
** Show matching parenthesis
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
** Use use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
** Try packages
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** Line Numbers
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Use Ibuffer instead of default
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Backup directory
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/saves/")))
   #+END_SRC
** Global wrapping of lines
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
** Make =yes or no= prompts shorter
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Make scroll a bit nicer?
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Set Browser
(setq browse-url-browser-function 'browse-url-firefox)
** Set UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** Spaces instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
* Which-Key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
  #+END_SRC
* Ivy
  Use Counsel to install ivy, swiper, and counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      )
  #+END_SRC
* Evil Mode
  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-default-state 'emacs)
    :config
    (evil-mode 1))
  #+END_SRC
* Org Mode
** Org Bullets  
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
  #+END_SRC 
** Indent 
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Hide emphasis
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
** Fontify code in code blocks
#+BEGIN_SRC emacs-lisp 
(setq org-src-fontify-natively t)
#+END_SRC
* Theming
** Colors
  #+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :config
      (load-theme 'base16-tomorrow-night t))
  #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
	 (dashboard-setup-startup-hook)
	 (setq dashboard-startup-banner "~/.emacs.d/memes/Miyamizu_Mitsuha_On_Ownership_And_Borrowing.png")
	 (setq dashboard-footer "I WILL START MY TURN BY PLAYING POT OF GREED WHICH ALLOWS ME TO DRAW TWO MORE CARDS."))
   #+END_SRC
** Powerline
*** Font Icons
    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons)
    #+END_SRC
*** Doomline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-minor-modes t)
      (setq doom-modeline-evil-state-icon nil))
   #+END_SRC
* Terminal
** Use vterm
  #+BEGIN_SRC emacs-lisp
    (use-package vterm
      :ensure t)
  #+END_SRC
** Shell-Pop
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :custom
    (shell-pop-shell-type (quote ("vterm" "*vterm*" (lambda nil (vterm)))))
    (shell-pop-term-shell "/bin/zsh")
    (shell-pop-universal-key "C-t")
    (shell-pop-window-size 30)
    (shell-pop-full-span t)
    (shell-pop-window-position "bottom"))
#+END_SRC
* Projectile
This is a project manager for projects
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-mode 1))
#+END_SRC
* Autocompletion
** Company Mode
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :config
     (setq company-idle-delay 0)
     (global-company-mode t))
   #+END_SRC
** LSP
   #+BEGIN_SRC emacs-lisp
   (use-package company-lsp
   :ensure t
   :config
   (push 'company-lsp company-backends))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
   :ensure t
   :hook (prog-mode . lsp)
   :config
   (setq lsp-auto-configure t))
   #+END_SRC
   
   lisp-ui
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui
       :ensure t
       :hook (lsp-mode . lsp-ui-mode))
   #+END_SRC
** Flycheck
This is a syntax and linting tool for Emacs. It checks the stuff in my buffer as I type. The =display-buffer-alist= allows me to open the flycheck errors window on the bottom like a small minibuffer. This buffer is created with =flycheck-list-errors=. I also disabled flycheck when editing source blocks in org-mode because they caused some weird linting errors.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init 
    (global-flycheck-mode)
    ; Make error list on bottom similar to modern IDE
    (add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
              (display-buffer-reuse-window
               display-buffer-in-side-window)
              (side            . bottom)
              (reusable-frames . visible)
              (window-height   . 0.13)))
    :config
    ; Turn off flycheck when editing using C-c '
    (defun disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    (add-hook 'org-src-mode-hook 'disable-flycheck-in-org-src-block)
    
    (setq flycheck-error-list-format
    [("File" 15 t)
    ("Line" 5 flycheck-error-list-entry-< :right-align t)
    ("Col" 3 nil :right-align t)
    ("Level" 8 flycheck-error-list-entry-level-<)
    ("ID" 6 t)
    (#("Message (Checker)" 9 16
    (face flycheck-error-list-checker-name))
    0 t) 
    ]))
#+END_SRC
** Yasnippet
Autocompletion for abbreviations, basically snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
* Rust
** Rust mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
* Python
** LSP
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-python-ms
     :ensure t)
   #+END_SRC
* LaTeX
  AUCTeX mode
  #+BEGIN_SRC emacs-lisp
    (use-package auctex
      :defer t
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil))
  #+END_SRC
  Preview Pane
  #+BEGIN_SRC emacs-lisp
    (use-package latex-preview-pane
      :ensure t)
  #+END_SRC
  Indent Fix?
  #+BEGIN_SRC 
  (setq LaTeX-item-indent 0)
  #+END_SRC
